/*
 * Copyright 2016, Robert 'Bobby' Zenz
 * 
 * This file is part of Quadracoatl.
 * 
 * Quadracoatl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Quadracoatl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Quadracoatl.  If not, see <http://www.gnu.org/licenses/>.
 */

const vec4 COLOR_BLUE = vec4(0.0, 0.0, 1.0, 1.0);
const vec4 COLOR_GREEN = vec4(0.0, 1.0, 0.0, 1.0);
const vec4 COLOR_RED = vec4(1.0, 0.0, 0.0, 1.0);

const int BLEND_MODE_ADDITION = 0;
const int BLEND_MODE_DARKEN_ONLY = 1;
const int BLEND_MODE_DIFFERENCE = 2;
const int BLEND_MODE_DIVIDE = 3;
const int BLEND_MODE_INVALID = -1;
const int BLEND_MODE_LIGHTEN_ONLY = 4;
const int BLEND_MODE_MULTIPLY = 5;
const int BLEND_MODE_NORMAL = 6;
const int BLEND_MODE_OVERLAY = 7;
const int BLEND_MODE_SCREEN = 8;
const int BLEND_MODE_SUBTRACT = 9;

vec4 applyAlpha(vec4 color) {
	return vec4(
			color.x * color.w,
			color.y * color.w,
			color.z * color.w,
			1.0);
}

vec4 blendColors(vec4 firstColor, vec4 secondColor, int blendMode) {
	if (blendMode <= BLEND_MODE_INVALID) {
		return firstColor;
	}
	
	vec4 mixed = firstColor;
	
	if (blendMode == BLEND_MODE_ADDITION) {
		mixed = firstColor + applyAlpha(secondColor);
	} else if (blendMode == BLEND_MODE_DARKEN_ONLY) {
		mixed = min(firstColor, applyAlpha(secondColor));
	} else if (blendMode == BLEND_MODE_DIFFERENCE) {
		mixed = abs(firstColor - applyAlpha(secondColor));
	} else if (blendMode == BLEND_MODE_DIVIDE) {
		mixed = firstColor / applyAlpha(secondColor);
	} else if (blendMode == BLEND_MODE_LIGHTEN_ONLY) {
		mixed = max(firstColor, applyAlpha(secondColor));
	} else if (blendMode == BLEND_MODE_MULTIPLY) {
		mixed = firstColor * applyAlpha(secondColor);
	} else if (blendMode == BLEND_MODE_NORMAL) {
		mixed = mix(firstColor, secondColor, secondColor.w);
	} else if (blendMode == BLEND_MODE_OVERLAY) {
		// TODO
	} else if (blendMode == BLEND_MODE_SCREEN) {
		mixed = 1.0 - (1.0 - firstColor) * (1.0 - applyAlpha(secondColor));
	} else if (blendMode == BLEND_MODE_SUBTRACT) {
		mixed = firstColor - applyAlpha(secondColor);
	}
	
	// Restore the original alpha value.
	mixed.w = firstColor.w;
	
	return min(max(mixed, 0.0), 1.0);
}
