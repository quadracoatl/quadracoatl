/*
 * Copyright 2017, Robert 'Bobby' Zenz
 * 
 * This file is part of Quadracoatl.
 * 
 * Quadracoatl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Quadracoatl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Quadracoatl.  If not, see <http://www.gnu.org/licenses/>.
 */


#define LIGHTS_MAX_COUNT 16

const int LIGHT_TYPE_AMBIENT = 0;
const int LIGHT_TYPE_DIRECTIONAL = 1;
const int LIGHT_TYPE_INVALID = -1;

vec4 applyAmbientLight(vec4 currentColor, vec4 ambientLightColor, int blendMode) {
	return blendColors(currentColor, ambientLightColor, blendMode);
}

vec4 applyLight(
		vec4 currentColor,
		vec3 normal,
		vec4 lightColor,
		vec3 lightDirection,
		int blendMode) {
	
	float dotProduct = dot(normalize(normal), normalize(lightDirection));
	
	if (dotProduct <= 0.0 && dotProduct >= -1.0) {
		vec4 softenedLightColor = vec4(lightColor);
		softenedLightColor.w = softenedLightColor.w * abs(dotProduct);
		
		return blendColors(currentColor, softenedLightColor, blendMode);
	} else {
		return currentColor;
	}
}

vec4 getLightingColor(
		vec3 normal,
		int lightsCount,
		vec4[LIGHTS_MAX_COUNT] lightsColors,
		vec3[LIGHTS_MAX_COUNT] lightsDirections,
		int[LIGHTS_MAX_COUNT] lightsTypes) {
	
	vec4 lightingColor = vec4(0.0, 0.0, 0.0, 1.0);
	
	for (int index = 0; index < lightsCount; index++) {
		int lightType = lightsTypes[index];
		
		if (lightType == LIGHT_TYPE_AMBIENT) {
			lightingColor = blendColors(
					lightingColor,
					lightsColors[index],
					BLEND_MODE_ADDITION);
		} else if (lightType == LIGHT_TYPE_DIRECTIONAL) {
			lightingColor = applyLight(
					lightingColor,
					normal,
					lightsColors[index],
					lightsDirections[index],
					BLEND_MODE_ADDITION);
		}
	}
	
	return lightingColor;
}
